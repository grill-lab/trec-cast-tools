# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mi_run.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0cmi_run.proto\"3\n\tCAsTMIRun\x12\x10\n\x08run_name\x18\x01 \x01(\t\x12\x14\n\x05turns\x18\x02 \x03(\x0b\x32\x05.Turn\"5\n\x04Turn\x12\x0f\n\x07turn_id\x18\x01 \x01(\t\x12\x1c\n\tquestions\x18\x02 \x03(\x0b\x32\t.Question\"+\n\x08Question\x12\x10\n\x08question\x18\x01 \x01(\t\x12\r\n\x05score\x18\x02 \x01(\x02\x62\x06proto3')



_CASTMIRUN = DESCRIPTOR.message_types_by_name['CAsTMIRun']
_TURN = DESCRIPTOR.message_types_by_name['Turn']
_QUESTION = DESCRIPTOR.message_types_by_name['Question']
CAsTMIRun = _reflection.GeneratedProtocolMessageType('CAsTMIRun', (_message.Message,), {
  'DESCRIPTOR' : _CASTMIRUN,
  '__module__' : 'mi_run_pb2'
  # @@protoc_insertion_point(class_scope:CAsTMIRun)
  })
_sym_db.RegisterMessage(CAsTMIRun)

Turn = _reflection.GeneratedProtocolMessageType('Turn', (_message.Message,), {
  'DESCRIPTOR' : _TURN,
  '__module__' : 'mi_run_pb2'
  # @@protoc_insertion_point(class_scope:Turn)
  })
_sym_db.RegisterMessage(Turn)

Question = _reflection.GeneratedProtocolMessageType('Question', (_message.Message,), {
  'DESCRIPTOR' : _QUESTION,
  '__module__' : 'mi_run_pb2'
  # @@protoc_insertion_point(class_scope:Question)
  })
_sym_db.RegisterMessage(Question)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CASTMIRUN._serialized_start=16
  _CASTMIRUN._serialized_end=67
  _TURN._serialized_start=69
  _TURN._serialized_end=122
  _QUESTION._serialized_start=124
  _QUESTION._serialized_end=167
# @@protoc_insertion_point(module_scope)
